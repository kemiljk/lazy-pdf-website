{"remainingRequest":"/Users/karlkoch/GitHub/lazy-pdf-website/node_modules/thread-loader/dist/cjs.js!/Users/karlkoch/GitHub/lazy-pdf-website/node_modules/babel-loader/lib/index.js!/Users/karlkoch/GitHub/lazy-pdf-website/node_modules/vuetify/lib/components/VData/VData.js","dependencies":[{"path":"/Users/karlkoch/GitHub/lazy-pdf-website/node_modules/vuetify/lib/components/VData/VData.js","mtime":1585839637415},{"path":"/Users/karlkoch/GitHub/lazy-pdf-website/node_modules/cache-loader/dist/cjs.js","mtime":1583312604768},{"path":"/Users/karlkoch/GitHub/lazy-pdf-website/node_modules/thread-loader/dist/cjs.js","mtime":1583312604800},{"path":"/Users/karlkoch/GitHub/lazy-pdf-website/node_modules/babel-loader/lib/index.js","mtime":1585087070436}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}